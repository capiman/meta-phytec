From 7c1733b633fb7ba709969d87989be3fc43954363 Mon Sep 17 00:00:00 2001
From: Christophe Parant <c.parant@phytec.fr>
Date: Mon, 2 Oct 2023 14:45:52 +0200
Subject: [PATCH 3/4] ARM v2021.10 stm32mp phy2 CONFIG

---
 configs/phycore-stm32mp13_defconfig | 145 ++++++++++++++++++++++++++++
 include/config_distro_bootcmd.h     |   1 +
 include/configs/phycore_rauc_env.h  |  60 ++++++++++++
 include/configs/phycore_stm32mp13.h |  66 +++++++++++++
 include/configs/phycore_stm32mp15.h |  11 +++
 5 files changed, 283 insertions(+)
 create mode 100644 configs/phycore-stm32mp13_defconfig
 create mode 100644 include/configs/phycore_rauc_env.h
 create mode 100644 include/configs/phycore_stm32mp13.h

diff --git a/configs/phycore-stm32mp13_defconfig b/configs/phycore-stm32mp13_defconfig
new file mode 100644
index 0000000000..c87b981b55
--- /dev/null
+++ b/configs/phycore-stm32mp13_defconfig
@@ -0,0 +1,145 @@
+CONFIG_ARM=y
+CONFIG_ARCH_STM32MP=y
+CONFIG_TFABOOT=y
+CONFIG_SYS_MALLOC_F_LEN=0x180000
+CONFIG_SYS_MEMTEST_START=0xc0000000
+CONFIG_SYS_MEMTEST_END=0xc4000000
+CONFIG_ENV_OFFSET=0x900000
+CONFIG_ENV_SECT_SIZE=0x40000
+CONFIG_DEFAULT_DEVICE_TREE="stm32mp135f-phycore-som-emmc-1gib"
+CONFIG_DEFAULT_FDT_FILE="oftree"
+CONFIG_STM32MP13x=y
+CONFIG_DDR_CACHEABLE_SIZE=0x10000000
+CONFIG_CMD_STM32KEY=y
+CONFIG_TARGET_PHYTEC_PHYCORE_STM32MP13x=y
+CONFIG_ENV_OFFSET_REDUND=0x940000
+CONFIG_CMD_STM32PROG=y
+# CONFIG_ARMV7_NONSEC is not set
+CONFIG_DISTRO_DEFAULTS=y
+CONFIG_FIT=y
+CONFIG_BOOTDELAY=1
+CONFIG_BOOTCOMMAND="run bootcmd_stm32mp"
+CONFIG_FDT_SIMPLEFB=y
+CONFIG_SYS_PROMPT="STM32MP> "
+CONFIG_CMD_ADTIMG=y
+CONFIG_CMD_ERASEENV=y
+CONFIG_CMD_NVEDIT_EFI=y
+CONFIG_CMD_MEMINFO=y
+CONFIG_CMD_MEMTEST=y
+CONFIG_CMD_UNZIP=y
+CONFIG_CMD_ADC=y
+CONFIG_CMD_CLK=y
+CONFIG_CMD_DFU=y
+CONFIG_CMD_FUSE=y
+CONFIG_CMD_GPIO=y
+CONFIG_CMD_I2C=y
+CONFIG_CMD_MMC=y
+CONFIG_CMD_SPI=y
+CONFIG_CMD_USB=y
+CONFIG_CMD_USB_MASS_STORAGE=y
+CONFIG_CMD_BMP=y
+CONFIG_CMD_CACHE=y
+CONFIG_CMD_EFIDEBUG=y
+CONFIG_CMD_TIME=y
+CONFIG_CMD_RNG=y
+CONFIG_CMD_TIMER=y
+CONFIG_CMD_REGULATOR=y
+CONFIG_CMD_EXT4_WRITE=y
+CONFIG_CMD_MTDPARTS=y
+CONFIG_CMD_LOG=y
+CONFIG_CMD_UBI=y
+CONFIG_OF_LIVE=y
+CONFIG_ENV_IS_NOWHERE=y
+CONFIG_ENV_IS_IN_MMC=y
+CONFIG_ENV_IS_IN_SPI_FLASH=y
+CONFIG_ENV_IS_IN_UBI=y
+CONFIG_SYS_REDUNDAND_ENVIRONMENT=y
+CONFIG_ENV_UBI_PART="UBI"
+CONFIG_ENV_UBI_VOLUME="uboot_config"
+CONFIG_ENV_UBI_VOLUME_REDUND="uboot_config_r"
+CONFIG_SYS_RELOC_GD_ENV_ADDR=y
+CONFIG_SYS_MMC_ENV_DEV=-1
+CONFIG_STM32_ADC=y
+CONFIG_CLK_SCMI=y
+CONFIG_SET_DFU_ALT_INFO=y
+CONFIG_USB_FUNCTION_FASTBOOT=y
+CONFIG_FASTBOOT_BUF_ADDR=0xC0000000
+CONFIG_FASTBOOT_BUF_SIZE=0x02000000
+CONFIG_FASTBOOT_USB_DEV=1
+CONFIG_FASTBOOT_FLASH=y
+CONFIG_FASTBOOT_FLASH_MMC_DEV=1
+CONFIG_GPIO_HOG=y
+CONFIG_DM_I2C=y
+CONFIG_SYS_I2C_STM32F7=y
+CONFIG_LED=y
+CONFIG_LED_GPIO=y
+CONFIG_STM32_FMC2_EBI=y
+CONFIG_SUPPORT_EMMC_BOOT=y
+CONFIG_STM32_SDMMC2=y
+CONFIG_MTD=y
+CONFIG_DM_MTD=y
+CONFIG_SYS_MTDPARTS_RUNTIME=y
+CONFIG_MTD_RAW_NAND=y
+CONFIG_NAND_STM32_FMC2=y
+CONFIG_MTD_SPI_NAND=y
+CONFIG_DM_SPI_FLASH=y
+CONFIG_SPI_FLASH_MACRONIX=y
+CONFIG_SPI_FLASH_SPANSION=y
+CONFIG_SPI_FLASH_STMICRO=y
+CONFIG_SPI_FLASH_WINBOND=y
+# CONFIG_SPI_FLASH_USE_4K_SECTORS is not set
+CONFIG_SPI_FLASH_MTD=y
+CONFIG_PHY_REALTEK=y
+CONFIG_DM_ETH=y
+CONFIG_DWC_ETH_QOS=y
+CONFIG_PHY=y
+CONFIG_PHY_STM32_USBPHYC=y
+CONFIG_PHY_TI=y
+CONFIG_PINCONF=y
+CONFIG_PINCTRL_MCP23017=y
+CONFIG_DM_REGULATOR=y
+CONFIG_DM_REGULATOR_FIXED=y
+CONFIG_DM_REGULATOR_GPIO=y
+CONFIG_DM_REGULATOR_SCMI=y
+CONFIG_RESET_SCMI=y
+CONFIG_DM_RNG=y
+CONFIG_RNG_OPTEE=y
+CONFIG_DM_RTC=y
+CONFIG_RTC_STM32=y
+CONFIG_SERIAL_RX_BUFFER=y
+CONFIG_SPI=y
+CONFIG_DM_SPI=y
+CONFIG_STM32_QSPI=y
+CONFIG_STM32_SPI=y
+CONFIG_SYSRESET_PSCI=y
+CONFIG_TEE=y
+CONFIG_OPTEE=y
+# CONFIG_OPTEE_TA_AVB is not set
+CONFIG_USB=y
+CONFIG_DM_USB_GADGET=y
+CONFIG_USB_EHCI_HCD=y
+CONFIG_USB_EHCI_GENERIC=y
+CONFIG_TYPEC=y
+CONFIG_TYPEC_UCSI=y
+CONFIG_UCSI_STM32G0=y
+CONFIG_USB_GADGET=y
+CONFIG_USB_GADGET_MANUFACTURER="STMicroelectronics"
+CONFIG_USB_GADGET_VENDOR_NUM=0x0483
+CONFIG_USB_GADGET_PRODUCT_NUM=0x5720
+CONFIG_USB_GADGET_DWC2_OTG=y
+CONFIG_DM_VIDEO=y
+CONFIG_BACKLIGHT_GPIO=y
+CONFIG_VIDEO_STM32=y
+CONFIG_VIDEO_STM32_MAX_XRES=480
+CONFIG_VIDEO_STM32_MAX_YRES=272
+CONFIG_VIDEO_BMP_RLE8=y
+CONFIG_BMP_16BPP=y
+CONFIG_BMP_24BPP=y
+CONFIG_BMP_32BPP=y
+CONFIG_WDT=y
+CONFIG_WDT_STM32MP=y
+CONFIG_ERRNO_STR=y
+CONFIG_FDT_FIXUP_PARTITIONS=y
+# CONFIG_LMB_USE_MAX_REGIONS is not set
+CONFIG_LMB_MEMORY_REGIONS=2
+CONFIG_LMB_RESERVED_REGIONS=16
diff --git a/include/config_distro_bootcmd.h b/include/config_distro_bootcmd.h
index 750e9e04e8..713814afc5 100644
--- a/include/config_distro_bootcmd.h
+++ b/include/config_distro_bootcmd.h
@@ -479,6 +479,7 @@
 		"part list ${devtype} ${devnum} -bootable devplist; "     \
 		"env exists devplist || setenv devplist 1; "              \
 		"for distro_bootpart in ${devplist}; do "                 \
+		"env exists altboot && if test ${altboot} = 1;then setexpr distro_bootpart ${distro_bootpart} + 1; fi;" \
 			"if fstype ${devtype} "                           \
 					"${devnum}:${distro_bootpart} "   \
 					"bootfstype; then "               \
diff --git a/include/configs/phycore_rauc_env.h b/include/configs/phycore_rauc_env.h
new file mode 100644
index 0000000000..1557e0a746
--- /dev/null
+++ b/include/configs/phycore_rauc_env.h
@@ -0,0 +1,60 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+/*
+ * Copyright (C) 2023 PHYTEC Messtechnik GmbH
+ * Author: Christophe Parant <c.parant@phytec.de>
+ */
+
+#ifndef __PHYCORE_RAUC_ENV_H
+#define __PHYCORE_RAUC_ENV_H
+
+/*
+ * Note:
+ *
+ * These are environment variables and scripts that help booting an A/B system
+ * using RAUC (see https://rauc.io) on PHYTEC's phyCORE STM32MP1 SoMs.
+ *
+ * Implementation:
+ *
+ *  1. Include this file in your board/SoM configuration.
+ *  2. Set the following variables in the U-Boot environment:
+ *        "doraucboot" for the default value whether to boot the A/B system.
+ *  3. Include the macro PHYCORE_RAUC_ENV_BOOTLOGIC environment to add the boot
+ *     logic for A/B systems.
+ *  4. Make sure CONFIG_BOOTCOMMAND properly boots the A/B system by executing
+ *     "run raucboot" depending on the value of "doraucboot".
+ *
+ * Usage:
+ *
+ *  1. Set "doraucboot" to "1" to activate booting the A/B system and save this
+ *     setting with "saveenv".
+ *  2. Run "boot".
+ */
+
+#define PHYCORE_RAUC_ENV_BOOTLOGIC \
+	"raucboot=env exists rootpartlabel || setenv rootpartlabel rootfs-a;" \
+		"env exists altboot || setenv altboot 0;" \
+		"if test ${bootslot} = system0;" \
+		"then " \
+			"env set rootpartlabel rootfs-a;" \
+			"env set altboot 0;" \
+			"echo 'Boot system A';" \
+		"else " \
+			"env set rootpartlabel rootfs-b;" \
+			"env set altboot 1;" \
+			"echo 'Boot system B';" \
+		"fi;\0" \
+	"bootretry=-1\0"
+
+/* The minimal subset of environment variables that RAUC needs to read/write
+ * from environment storage. This can be used by locked-down builds, i. e. when
+ * u-boot is to be used in a secureboot context.
+ *
+ * The following ruleset will only apply if CONFIG_ENV_WRITEABLE_LIST is set
+ * */
+#define RAUC_REQUIRED_WRITABLE_ENV_FLAGS "doraucboot:dw"
+
+/* Boot retry */
+#define CONFIG_BOOT_RETRY_TIME -1
+#define CONFIG_RESET_TO_RETRY
+
+#endif /* __PHYCORE_RAUC_ENV_H */
diff --git a/include/configs/phycore_stm32mp13.h b/include/configs/phycore_stm32mp13.h
new file mode 100644
index 0000000000..53d7beb24d
--- /dev/null
+++ b/include/configs/phycore_stm32mp13.h
@@ -0,0 +1,66 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+/*
+ * Copyright (C) 2023 PHYTEC Messtechnik GmbH
+ * Author: Christophe Parant <c.parant@phytec.fr>
+ */
+
+#ifndef __CONFIG_PHYCORE_STM32MP13_H__
+#define __CONFIG_PHYCORE_STM32MP13_H__
+
+#define STM32MP_BOARD_EXTRA_ENV \
+	"usb_pgood_delay=1000\0" \
+	"console=ttySTM0\0" \
+	"fdtfile=" CONFIG_DEFAULT_FDT_FILE "\0"
+
+#include <configs/stm32mp13_common.h>
+#include "phycore_rauc_env.h"
+
+/* uart with on-board st-link */
+#define CONFIG_SYS_BAUDRATE_TABLE      { 9600, 19200, 38400, 57600, 115200, \
+					 230400, 460800, 921600, \
+					 1000000, 2000000, 4000000}
+
+#ifdef CONFIG_EXTRA_ENV_SETTINGS
+/*
+ * default bootcmd for phyCORE-STM32MP13:
+ * for serial/usb: execute the stm32prog command
+ * for mmc boot (eMMC, SD card), distro boot on the same mmc device
+ * for nand or spi-nand boot, distro boot with ubifs on UBI partition
+ * for nor boot, distro boot on SD card = mmc0 ONLY !
+ */
+#define ST_STM32MP13_BOOTCMD "bootcmd_stm32mp=" \
+	"env exists doraucboot || setenv doraucboot 0;" \
+	"if test ${doraucboot} = 1; then " \
+		"run raucboot;" \
+	"fi;" \
+	"echo \"Boot over ${boot_device}${boot_instance}!\";" \
+	"if test ${boot_device} = serial || test ${boot_device} = usb;" \
+	"then stm32prog ${boot_device} ${boot_instance}; " \
+	"else " \
+		"run env_check;" \
+		"if test ${boot_device} = mmc;" \
+		"then env set boot_targets \"mmc${boot_instance}\"; fi;" \
+		"if test ${boot_device} = nand ||" \
+		  " test ${boot_device} = spi-nand ;" \
+		"then env set boot_targets ubifs0; fi;" \
+		"if test ${boot_device} = nor;" \
+		"then env set boot_targets mmc0; fi;" \
+		"run distro_bootcmd;" \
+	"fi;\0"
+
+#ifdef CONFIG_ENV_WRITEABLE_LIST
+/* Set environment flag validation to a list of env vars that must be writable */
+#define CONFIG_ENV_FLAGS_LIST_STATIC RAUC_REQUIRED_WRITABLE_ENV_FLAGS
+#endif
+
+#undef CONFIG_EXTRA_ENV_SETTINGS
+#define CONFIG_EXTRA_ENV_SETTINGS \
+	STM32MP_MEM_LAYOUT \
+	PHYCORE_RAUC_ENV_BOOTLOGIC \
+	ST_STM32MP13_BOOTCMD \
+	BOOTENV \
+	STM32MP_EXTRA \
+	STM32MP_BOARD_EXTRA_ENV
+
+#endif
+#endif
diff --git a/include/configs/phycore_stm32mp15.h b/include/configs/phycore_stm32mp15.h
index c8d493823c..e5f1a3ce61 100644
--- a/include/configs/phycore_stm32mp15.h
+++ b/include/configs/phycore_stm32mp15.h
@@ -13,6 +13,7 @@
 	"fdtfile=" CONFIG_DEFAULT_FDT_FILE "\0"
 
 #include <configs/stm32mp15_common.h>
+#include "phycore_rauc_env.h"
 
 /* uart with on-board st-link */
 #define CONFIG_SYS_BAUDRATE_TABLE      { 9600, 19200, 38400, 57600, 115200, \
@@ -28,6 +29,10 @@
  * for nor boot, distro boot on eMMC = mmc1
  */
 #define ST_STM32MP1_BOOTCMD "bootcmd_stm32mp=" \
+	"env exists doraucboot || setenv doraucboot 0;" \
+	"if test ${doraucboot} = 1; then " \
+		"run raucboot;" \
+	"fi;" \
 	"echo \"Boot over ${boot_device}${boot_instance}!\";" \
 	"if test ${boot_device} = serial || test ${boot_device} = usb;" \
 	"then stm32prog ${boot_device} ${boot_instance}; " \
@@ -42,9 +47,15 @@
 		"run distro_bootcmd;" \
 	"fi;\0"
 
+#ifdef CONFIG_ENV_WRITEABLE_LIST
+/* Set environment flag validation to a list of env vars that must be writable */
+#define CONFIG_ENV_FLAGS_LIST_STATIC RAUC_REQUIRED_WRITABLE_ENV_FLAGS
+#endif
+
 #undef CONFIG_EXTRA_ENV_SETTINGS
 #define CONFIG_EXTRA_ENV_SETTINGS \
 	STM32MP_MEM_LAYOUT \
+        PHYCORE_RAUC_ENV_BOOTLOGIC \
 	ST_STM32MP1_BOOTCMD \
 	STM32MP_PARTS_DEFAULT \
 	BOOTENV \
-- 
2.25.1

